security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
            # La propriété unique testé pour la connexion est l'email
                property: email
        # le provider de JWT est connecté a la classe User déja créer
        jwt:
            lexik_jwt:
                class: App\Entity\User
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_token_refresh:
            pattern: ^/api/token/refresh
            stateless: true
            provider: app_user_provider
        login:
            #Le login classique utilise le app_user_provider de symfony.
            pattern: ^/api/login$
            stateless: true
            provider: app_user_provider
            # json_login permet l'authentification par requête POST
            json_login:
                # un token est généré en cas de réussite et transmis.
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            # Pour API Platform et l'ensemble des requêtes, c'est le JWT qui est le provider
            # C'est stateless, cela veut dire que rien n'est stocké, que toutes les demandes sont indépendantes.
            pattern: ^/api
            provider: jwt
            jwt: ~
            stateless: true


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api/users, roles: PUBLIC_ACCESS }
        - { path: ^/api/hash, roles: PUBLIC_ACCESS }
        - { path: ^/api/check, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_USER }
        - { path: ^/api/adventures/check, roles: ROLE_USER }
